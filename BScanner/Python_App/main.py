# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_win.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal, QObject
from pyqtgraph import ImageItem, GraphicsLayoutWidget, mkPen, ColorBarItem

import pyqtgraph as pg
import numpy as np
import serial
import serial.tools.list_ports
import struct
from perlin import perlin
from time import sleep
import threading
import pathlib



class SpaceMeasureWorker(QObject):

    finished_sig = pyqtSignal()
    stopped_sig = pyqtSignal()
    update_sig = pyqtSignal()

    def __init__(self, main_win):
        super(SpaceMeasureWorker, self).__init__()
        self.mw = main_win

    def run(self):
        
        print("start measure")


        x_size = self.mw.x_size_sb.value()
        y_size = self.mw.y_size_sb.value()
        z_size = self.mw.z_size_sb.value()
        print("1")
        step_size = float(self.mw.step_cb.currentText())

        x_steps = np.arange(0, x_size, step_size)+self.mw.x_pos
        y_steps = np.arange(0, y_size, step_size)+self.mw.y_pos
        z_steps = np.arange(0, z_size, step_size)+self.mw.z_pos

        start_pos = [self.mw.x_pos, self.mw.y_pos, self.mw.z_pos]
        print("2")
        if self.mw.origin_var==0:
            x_steps-=x_size/2
            y_steps-=y_size/2
            z_steps-=z_size/2

        print("3")
        if self.mw.origin_var==0:
            if self.mw.plane_var == 0:
                z_steps= [self.mw.z_pos]
                self.mw.operation(self.mw.MOVE_X, -x_size/2) #print("move x") 
                #self.mw.thread_ev.wait()
                self.mw.operation(self.mw.MOVE_Y, -y_size/2) #print("move y") 
                #self.mw.thread_ev.wait()

            elif self.mw.plane_var == 1:
                y_steps = [self.mw.y_pos]
                self.mw.operation(self.mw.MOVE_X, -x_size/2) #print("move x") 
                #self.mw.thread_ev.wait()
                self.mw.operation(self.mw.MOVE_Z, -z_size/2) #print("move z") 
                #self.mw.thread_ev.wait()
            else:
                x_steps = [self.mw.x_pos]
                self.mw.operation(self.mw.MOVE_Y, -y_size/2) #print("move x") 
                #self.mw.thread_ev.wait()
                self.mw.operation(self.mw.MOVE_Z, -z_size/2) #print("move z") 
                #self.mw.thread_ev.wait()
        else:
            if self.mw.plane_var == 0:
                z_steps= [self.mw.z_pos]
            elif self.mw.plane_var == 1:
                y_steps = [self.mw.y_pos]
            else:
                x_steps = [self.mw.x_pos]

        img_arr = np.zeros((len(x_steps), len(y_steps), len(z_steps)))

        for k in range(len(z_steps)):
            with self.mw.lock:
                if self.mw.stop_measure:
                    self.mw.stop_measure = False
                    print("end z")
                    break

            if self.mw.plane_var != 0:
                self.mw.operation(self.mw.MOVE_Z, step_size)  
                #self.mw.thread_ev.wait()

            for j in range(len(y_steps)):
                with self.mw.lock:
                    if self.mw.stop_measure:
                        print("end y")
                        break
                
                if self.mw.plane_var != 1:
                    self.mw.operation(self.mw.MOVE_Y, step_size)
                    #self.mw.thread_ev.wait()

                for i in range(len(x_steps)):

                    with self.mw.lock:
                        if self.mw.stop_measure:
                            print("end x")
                            break

                    if self.mw.plane_var != 2:
                        self.mw.operation(self.mw.MOVE_X, step_size)
                        #self.mw.thread_ev.wait()

                    self.mw.operation(self.mw.VALUE, self.mw.NULL)
                    #self.mw.thread_ev.wait()

                    img_arr[i, j, k] = self.mw.curr_value

                    if self.mw.plane_var == 0:
                        self.mw.img_arr = img_arr[:,:,0]
                    elif self.mw.plane_var == 1:
                        self.mw.img_arr = img_arr[:,0,:]
                    elif self.mw.plane_var == 2:
                        self.mw.img_arr = img_arr[0,:,:]

                    self.update_sig.emit()

                if self.mw.plane_var != 2 and not self.mw.stop_measure:
                    self.mw.operation(self.mw.MOVE_X, -step_size*(len(x_steps)-1))
                    #self.mw.thread_ev.wait()
            
            if self.mw.plane_var != 1 and not self.mw.stop_measure:
                self.mw.operation(self.mw.MOVE_Y, -step_size*(len(y_steps)-1))
                #self.mw.thread_ev.wait()

        self.mw.operation(self.mw.MOVE_TO_X, start_pos[0])
        #self.mw.thread_ev.wait()
        self.mw.operation(self.mw.MOVE_TO_Y, start_pos[1])
        #self.mw.thread_ev.wait()
        self.mw.operation(self.mw.MOVE_TO_Z, start_pos[2])
        #self.mw.thread_ev.wait()
        
        print("end measure")


        self.finished_sig.emit()
        self.update_sig.emit()


class SpaceMeasureWorker_Best(QObject):

    finished_sig = pyqtSignal()
    stopped_sig = pyqtSignal()
    update_sig = pyqtSignal()

    def __init__(self, main_win):
        super(SpaceMeasureWorker_Best, self).__init__()
        self.mw : Ui_MainWindow = main_win

    def run(self):
        
        print("start measure")

        self.mw.operation(self.mw.ENABLE, self.mw.NULL)  
        x_size = self.mw.x_size_sb.value()
        y_size = self.mw.y_size_sb.value()
        z_size = self.mw.z_size_sb.value()
        print("1")
        step_size = float(self.mw.step_cb.currentText())

        x_steps = np.arange(0, x_size, step_size)+self.mw.x_pos
        y_steps = np.arange(0, y_size, step_size)+self.mw.y_pos
        z_steps = np.arange(0, z_size, step_size)+self.mw.z_pos

        start_pos = [self.mw.x_pos, self.mw.y_pos, self.mw.z_pos]

        print("2")
        if self.mw.origin_var==0:
            x_steps-=(x_size-step_size)/2
            y_steps-=(y_size-step_size)/2
            z_steps-=(z_size-step_size)/2

        print("3")
        if self.mw.plane_var == 0:
            z_steps= [self.mw.z_pos]
        elif self.mw.plane_var == 1:
            y_steps = [self.mw.y_pos]
        else:
            x_steps = [self.mw.x_pos]

        img_arr = np.zeros((len(x_steps), len(y_steps), len(z_steps)))
        print(x_steps)
        print(y_steps)
        print(z_steps)
        print(start_pos)
        

        for k, z in enumerate(z_steps):
            with self.mw.lock:
                if self.mw.stop_measure:
                    print("end z")
                    break

            if self.mw.plane_var != 0:
                self.mw.operation(self.mw.MOVE_TO_Z, z)  
                #self.mw.thread_ev.wait()

            for j, y in enumerate(y_steps):
                with self.mw.lock:
                    if self.mw.stop_measure:
                        print("end y")
                        break
                
                if self.mw.plane_var != 1:
                    self.mw.operation(self.mw.MOVE_TO_Y, y)
                    #self.mw.thread_ev.wait()

                for i, x in enumerate(x_steps):

                    with self.mw.lock:
                        if self.mw.stop_measure:
                            print("end x")
                            break

                    if self.mw.plane_var != 2:
                        self.mw.operation(self.mw.MOVE_TO_X, x)
                        #self.mw.thread_ev.wait()

                    self.mw.operation(self.mw.VALUE, self.mw.NULL)
                    #self.mw.thread_ev.wait()

                    img_arr[i, j, k] = self.mw.curr_value

                    if self.mw.plane_var == 0:
                        self.mw.img_arr = img_arr[:,:,0]
                    elif self.mw.plane_var == 1:
                        self.mw.img_arr = img_arr[:,0,:]
                    elif self.mw.plane_var == 2:
                        self.mw.img_arr = img_arr[0,:,:]

                    self.update_sig.emit()

        self.mw.operation(self.mw.MOVE_TO_X, start_pos[0])
        #self.mw.thread_ev.wait()
        self.mw.operation(self.mw.MOVE_TO_Y, start_pos[1])
        #self.mw.thread_ev.wait()
        self.mw.operation(self.mw.MOVE_TO_Z, start_pos[2])
        #self.mw.thread_ev.wait()
        
        self.mw.operation(self.mw.DISABLE, self.mw.NULL)
        print("end measure")
        
        self.update_sig.emit()
        self.finished_sig.emit()
        self.mw.stop_measure = False


class TimeMeasureWorker(QObject):

    finished_sig = pyqtSignal()
    stopped_sig = pyqtSignal()
    update_sig = pyqtSignal()

    def __init__(self, main_win):
        super(TimeMeasureWorker, self).__init__()
        self.mw = main_win

    def run(self):
        t_step = float(self.mw.time_step_cb.currentText())
        t_span = self.mw.time_sb.value()
        
        t_steps = np.arange(0, t_span, t_step)

        self.mw.plot_arr = np.zeros((len(t_steps), 2))

        for i, t in enumerate(t_steps):
            with self.mw.lock:
                if self.mw.stop_measure:
                    print("end z")
                    break
            sleep(t_step)
            self.mw.operation(self.mw.VALUE, self.mw.NULL)
            #self.mw.thread_ev.wait()

            self.mw.plot_arr[i,0] = t
            self.mw.plot_arr[i,1] = self.mw.curr_value
            self.mw.update_plot(i)

        print("end measure")
        self.update_sig.emit()
        self.finished_sig.emit()
        self.mw.stop_measure = False
        
class Ui_MainWindow(object):

    def report(self, msg):
        self.status.showMessage(msg)

    def plane_btn_action(self, value):
        arr = [self.xy_plane_btn, self.xz_plane_btn, self.yz_plane_btn]

        self.plane_var = value

        for i , btn in enumerate(arr):
            if i == value:
                btn.setStyleSheet(self.style_selected)
            else:
                btn.setStyleSheet("")
        # print(value)

    def origin_btn_action(self, value):
        arr = [self.center_btn, self.corner_btn]

        self.origin_var = value

        for i , btn in enumerate(arr):
            if i == value:
                btn.setStyleSheet(self.style_selected)
            else:
                btn.setStyleSheet("")
        # print(value)

    def refresh_btn_action(self):
        self.com_list = []
        coms = serial.tools.list_ports.comports(True)
        if len(coms) == 0:
            self.report("No Port Found")
        else:
            self.port_cb.clear()
            self.report(f"{len(coms)} Port Found")
            p_star = 0
            for i, com in enumerate(coms):
                device_info = ""
                if com.pid == self.PORT_PID and com.vid == self.PORT_VID:
                    device_info = " (Mega)"
                    p_star = i

                self.port_cb.addItem(com.device + device_info)
                self.com_list.append(com.device)
            self.port_cb.setCurrentIndex(p_star)
            self.open_btn.setEnabled(True)

    def open_btn_action(self):
        if self.connected:
            self.connected = False
            self.open_btn.setText("Open")
            self.refresh_btn.setEnabled(True)
            self.port_cb.setEnabled(True)
            self.report(f"Closed connection with {self.COM}")
            self.control_gb.setEnabled(False)
            self.measure_gb.setEnabled(False)
        else:
            self.COM = self.com_list[self.port_cb.currentIndex()]
            try:
                self.port = serial.Serial(self.COM, self.BAUDRATE)
                self.port.reset_input_buffer()
                self.port.reset_output_buffer()
                sleep(2)
                self.operation(b'\xff', self.NULL)
                #self.thread_ev.wait()
                self.operation(b'\xff', self.NULL)
                #self.thread_ev.wait()

            except serial.SerialException:
                self.report(f"Could not open port {self.COM}")
            else:
                self.connected = True
                self.report(f"Opened serial connection with port {self.COM} at {self.BAUDRATE} baudrate")
                self.open_btn.setText("Close")
                self.refresh_btn.setEnabled(False)
                self.port_cb.setEnabled(False)
            
                self.control_gb.setEnabled(True)
                self.measure_gb.setEnabled(True)

    def operation(self, cmd, var):
        try:
            if not self.thread.is_alive():
                val_hex = struct.pack(">f", var)
                self.port.write(cmd+val_hex+b'\n')
                self.thread_ev.clear()
                self.thread = threading.Thread(target=self.response_handle)
                self.thread.start()
                # print("Operation",cmd)
                self.thread_ev.wait()
                # print("Operation", cmd, var)
        except Exception as e:
            print(e)

    def set_ax_position(self, ax, val):
        if ax==0:
            self.x_pos_lbl.setText("X Pos: "+f"{val:.2f}")
            self.x_pos = val
        elif ax==1:
            self.y_pos_lbl.setText("Y Pos: "+f"{val:.2f}")
            self.y_pos = val
        elif ax==2:
            self.z_pos_lbl.setText("Z Pos: "+f"{val:.2f}")
            self.z_pos = val

    def response_handle(self):
        while (self.port.inWaiting()<5):
            pass
        # a = self.port.read(1)
        cmd = self.port.read(1)
        val = self.port.read(4)

        # print("Response", cmd, val)
        val = struct.unpack('>f', val)[0]

        if cmd==b'\x01': # MOVE X 
            self.set_ax_position(0, val)
        elif cmd==b'\x02': # MOVE Y
            self.set_ax_position(1, val)
        elif cmd==b'\x03': # MOVE Z
            self.set_ax_position(2, val)
        elif cmd==b'\x04': # HOME X
            self.set_ax_position(0, val)
        elif cmd==b'\x05': # HOME Y
            self.set_ax_position(1, val)
        elif cmd==b'\x06': # HOME Z
            self.set_ax_position(2, val)
        elif cmd==b'\x07': # MOVE TO X
            self.set_ax_position(0, val)
        elif cmd==b'\x08': # MOVE TO Y
            self.set_ax_position(1, val)
        elif cmd==b'\x09': # MOVE TO Z
            self.set_ax_position(2, val)
        elif cmd==b'\x0b': # MEASURE
            self.val_le.setText(f"{val:.2f}")
            self.curr_value = val
        elif cmd==b'\x0c': # SET ADC SCALE
            pass
        elif cmd==b'\x0d': # ENABLE
            pass
        elif cmd==b'\x0d': # DISABLE
            pass
        self.thread_ev.set()
    
    def update_img(self):
        self.img_item.setImage(self.img_arr)
        self.bar_item.setLevels((np.amin(self.img_arr), np.amax(self.img_arr)))
        # HELP: https://stackoverflow.com/questions/18080170/what-is-the-easiest-way-to-achieve-realtime-plotting-in-pyqtgraph
        QtWidgets.QApplication.processEvents()
    
    def update_plot(self, index):
        self.plot_area.setData(self.plot_arr[0:index],pen=mkPen("#111111", width=1.0))
        QtWidgets.QApplication.processEvents()

    def handle_finish(self):
        self.start_measure = False
        self.start_btn.setText("Start")
        # self.adc_sett_cb.setDisabled(False)
        if self.measure_type==0:
            np.savetxt(self.path+"/measure.txt", self.img_arr)
        else:
            np.savetxt(self.path+"time_measure.txt", self.plot_arr)

    def init_inputs(self):
        self.open_btn.setEnabled(False)
        self.refresh_btn_action()
    
    def start_btn_action(self):
        if self.port:
            if not self.port.isOpen():
                self.start_measure = False
                with self.lock:
                    self.stop_measure = True
                    # sleep(1)
                self.start_btn.setText("Start")
                
                return
        else:
            self.start_measure = False
            self.start_btn.setDisabled(True)
            with self.lock:
                self.stop_measure = True
                # sleep(1)
            self.start_btn.setText("Start")
            self.start_btn.setDisabled(False)
            # self.adc_sett_cb.setDisabled(False)
            return
        
        if self.start_measure:
            self.start_measure = False
            self.start_btn.setDisabled(True)
            with self.lock:
                self.stop_measure = True
                # sleep(1)
            self.start_btn.setText("Start")
            self.start_btn.setDisabled(False)
            # self.adc_sett_cb.setDisabled(False)
        else:
            self.start_measure = True
            self.start_btn.setText("Stop")
            # self.adc_sett_cb.setDisabled(True)
            self.stop_measure = False
            

            if self.measure_type == 0:
                
                self.destroy_image()
                self.init_image()
                self.measure_thread = QThread()
                self.worker = SpaceMeasureWorker_Best(self)
                self.worker.moveToThread(self.measure_thread)
                self.measure_thread.started.connect(self.worker.run)
                self.worker.finished_sig.connect(self.measure_thread.quit)
                self.worker.finished_sig.connect(self.worker.deleteLater)
                self.measure_thread.finished.connect(self.measure_thread.deleteLater)
                self.worker.finished_sig.connect(self.handle_finish)
                self.worker.update_sig.connect(self.update_img)
                self.measure_thread.start()
            else:
                self.destroy_plot()
                self.init_plot()
                self.measure_thread = QThread()
                self.worker = TimeMeasureWorker(self)
                self.worker.moveToThread(self.measure_thread)
                self.measure_thread.started.connect(self.worker.run)
                self.worker.finished_sig.connect(self.measure_thread.quit)
                self.worker.finished_sig.connect(self.worker.deleteLater)
                self.measure_thread.finished.connect(self.measure_thread.deleteLater)
                self.worker.finished_sig.connect(self.handle_finish)
                # # self.adc_sett_cb.setDisabled(True)
                self.measure_thread.start()

    def init_plot(self):
        self.plot_item = pg.PlotItem()
        self.graph_view.setCentralItem(self.plot_item)
        self.plot_item.showAxes(True)
        self.plot_area = self.plot_item.plot()
        self.xaxis = self.plot_item.getAxis("bottom")
        self.yaxis = self.plot_item.getAxis("left")
        self.xaxis.setTextPen("k")
        self.xaxis.setPen("k")
        self.yaxis.setTextPen("k")
        self.yaxis.setPen("k")
        self.plot_item.showGrid(True, True, alpha=0.2)
        self.plot_item.setXRange(0, float(self.time_sb.value()))

    def destroy_plot(self):
        if self.plot_item:
            self.plot_item.getViewBox().removeItem(self.plot_item)

    def init_image(self):
        self.plot_item = pg.PlotItem()
        self.graph_view.setCentralItem(self.plot_item)

        self.plot_item.showAxes(False)
        self.img_item = pg.ImageItem()
        self.img_item.setImage(self.img_arr)
        cm = pg.colormap.get('viridis')
        self.img_item.setColorMap(cm)
        self.bar_item = pg.ColorBarItem(values=(np.amin(self.img_arr), np.amax(self.img_arr)), colorMap=cm, interactive=False, pen='k') # prepare interactive color bar
        self.bar_item.setImageItem(self.img_arr, insert_in= self.plot_item)
        self.plot_item.addItem(self.img_item)

    def destroy_image(self):
        if self.img_item:
            self.plot_item.getViewBox().removeItem(self.img_item)
        if self.bar_item:
            self.plot_item.getViewBox().removeItem(self.bar_item)

    def radio_action(self, val):
        self.measure_type = val
    
    def move_operation_with_en(self, cmd, val):
        self.operation(self.ENABLE, self.NULL)
        self.operation(cmd, val)
        self.operation(self.DISABLE, self.NULL)
    
    def adc_value_action(self, idx):
        self.operation(self.ADC_SCALE, idx+1)

    def set_events(self):
        
        self.main_widget.closeEvent = self.on_close
        self.center_btn.clicked.connect(lambda : self.origin_btn_action(0))
        self.corner_btn.clicked.connect(lambda : self.origin_btn_action(1))

        self.xy_plane_btn.clicked.connect(lambda : self.plane_btn_action(0))
        self.xz_plane_btn.clicked.connect(lambda : self.plane_btn_action(1))
        self.yz_plane_btn.clicked.connect(lambda : self.plane_btn_action(2))

        self.refresh_btn.clicked.connect(self.refresh_btn_action)
        self.open_btn.clicked.connect(self.open_btn_action)

        self.home_x_btn.clicked.connect(lambda: self.move_operation_with_en(self.HOME_X, self.NULL))
        self.home_y_btn.clicked.connect(lambda: self.move_operation_with_en(self.HOME_Y, self.NULL))
        self.home_z_btn.clicked.connect(lambda: self.move_operation_with_en(self.HOME_Z, self.NULL))

        self.zero_x_btn.clicked.connect(lambda: self.move_operation_with_en(self.MOVE_TO_X, 0.0))
        self.zero_y_btn.clicked.connect(lambda: self.move_operation_with_en(self.MOVE_TO_Y, 0.0))
        self.zero_z_btn.clicked.connect(lambda: self.move_operation_with_en(self.MOVE_TO_Z, 0.0))

        self.move_x_r_btn.clicked.connect(lambda: self.move_operation_with_en(self.MOVE_X, float(self.move_cb.currentText())))
        self.move_x_l_btn.clicked.connect(lambda: self.move_operation_with_en(self.MOVE_X, -float(self.move_cb.currentText())))

        self.move_y_r_btn.clicked.connect(lambda: self.move_operation_with_en(self.MOVE_Y, float(self.move_cb.currentText())))
        self.move_y_l_btn.clicked.connect(lambda: self.move_operation_with_en(self.MOVE_Y, -float(self.move_cb.currentText())))

        self.move_z_r_btn.clicked.connect(lambda: self.move_operation_with_en(self.MOVE_Z, float(self.move_cb.currentText())))
        self.move_z_l_btn.clicked.connect(lambda: self.move_operation_with_en(self.MOVE_Z, -float(self.move_cb.currentText())))

        self.val_btn.clicked.connect(lambda: self.operation(self.VALUE, self.NULL))

        self.start_btn.clicked.connect(self.start_btn_action)

        self.adc_sett_cb.currentIndexChanged.connect(self.adc_value_action)

        self.space_mes_rb.toggled.connect(lambda: self.radio_action(0))
        self.time_mes_rb.toggled.connect(lambda: self.radio_action(1))

    def on_close(self):
        if self.port:
            self.port.close()

    def setupUi(self, MainWindow: QtWidgets.QMainWindow):
        
        self.path = str(pathlib.Path(__file__).parent.resolve())
        # print(type(self.path))

        MainWindow.resize(802, 680)
        self.main_widget = QtWidgets.QWidget(MainWindow)
        self.main_layout = QtWidgets.QGridLayout(self.main_widget)
        MainWindow.setWindowTitle("MainWindow")

        self.connected = False
        self.port: serial.Serial = None 
        self.com_list = None

        self.COM = None
        self.BAUDRATE = 115200

        self.thread = threading.Thread()
        self.measure_thread = None
        self.thread_ev = threading.Event()
        self.lock = threading.RLock()
        self.x_pos = 0.0
        self.y_pos = 0.0
        self.z_pos = 0.0

        # command list
        self.MOVE_X = b'\x01'
        self.MOVE_Y = b'\x02'
        self.MOVE_Z = b'\x03'

        self.HOME_X = b'\x04'
        self.HOME_Y = b'\x05'
        self.HOME_Z = b'\x06'

        self.MOVE_TO_X = b'\x07'
        self.MOVE_TO_Y = b'\x08'
        self.MOVE_TO_Z = b'\x09'


        self.VALUE = b'\x0b'
        self.ADC_SCALE = b'\x0c'
        self.ENABLE = b'\x0d'
        self.DISABLE = b'\x0e'
        self.NULL = 0.0

        self.PORT_PID = 66 
        self.PORT_VID = 9025

        self.img_arr = np.zeros((1, 1, 1))
        self.plot_arr = np.zeros((1, 2))
        self.curr_value = 0

        self.stop_measure = False
        self.start_measure = False

        self.measure_type = 0

        self.img_item = None
        self.bar_item = None
        self.plot_item = None
        # ------------------------------------------------------------- CONNECTION GROUP
        font = QtGui.QFont()
        font.setPointSize(10)

        self.connection_gb = QtWidgets.QGroupBox(self.main_widget)
        self.connection_gb.setMaximumHeight(100)
        self.connection_gb.setFont(font)
        self.connection_gb.setTitle("Connection")

        font = QtGui.QFont()
        font.setPointSize(11)
        self.port_lbl = QtWidgets.QLabel(self.connection_gb)
        self.port_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.port_lbl.setFont(font)
        self.port_lbl.setText("Port:")

        self.port_cb = QtWidgets.QComboBox(self.connection_gb)
        self.port_cb.setFont(font)
        self.port_cb.setCurrentText("")
        self.port_cb.setMinimumHeight(30)
        self.port_cb.setMaximumWidth(100)
        self.port_cb.setPlaceholderText("...")

        self.open_btn = QtWidgets.QPushButton(self.connection_gb)
        self.open_btn.setMinimumHeight(30)
        self.open_btn.setFont(font)
        self.open_btn.setText("Open")

        self.refresh_btn = QtWidgets.QPushButton(self.connection_gb)
        self.refresh_btn.setFont(font)
        self.refresh_btn.setMinimumHeight(30)
        self.refresh_btn.setText("Refresh")
        

        font = QtGui.QFont()
        font.setPointSize(10)
        
        self.control_gb = QtWidgets.QGroupBox(self.main_widget)
        self.control_gb.setMaximumWidth(220)
        self.control_gb.setFont(font)
        self.control_gb.setTitle("Control")

        self.gridLayout = QtWidgets.QGridLayout(self.connection_gb)
        self.gridLayout.addWidget(self.port_lbl, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.port_cb, 0, 1, 1, 1)
        self.gridLayout.addWidget(self.refresh_btn, 1, 0, 1, 1)
        self.gridLayout.addWidget(self.open_btn, 1, 1, 1, 1)
        self.control_ly = QtWidgets.QVBoxLayout(self.control_gb)

        self.main_layout.addWidget(self.connection_gb, 0, 0, 1, 1)
        # -------------------------------------------------------------- CONTROL GROUP

        # -------------------------- HOME LAYOUT
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)

        self.home_ly = QtWidgets.QHBoxLayout()

        self.home_lbl = QtWidgets.QLabel(self.control_gb)
        self.home_lbl.setMaximumSize(QtCore.QSize(35, 35))
        self.home_lbl.setText("")
        self.home_lbl.setTextFormat(QtCore.Qt.MarkdownText)
        self.home_lbl.setPixmap(QtGui.QPixmap(self.path+"/assets/home.png"))
        self.home_lbl.setScaledContents(True)

        self.home_x_btn = QtWidgets.QPushButton(self.control_gb)
        self.home_x_btn.setMinimumSize(QtCore.QSize(0, 44))
        self.home_x_btn.setFont(font)
        self.home_x_btn.setText("X")

        self.home_y_btn = QtWidgets.QPushButton(self.control_gb)
        self.home_y_btn.setMinimumSize(QtCore.QSize(0, 45))
        self.home_y_btn.setFont(font)
        self.home_y_btn.setText("Y")

        self.home_z_btn = QtWidgets.QPushButton(self.control_gb)
        self.home_z_btn.setMinimumSize(QtCore.QSize(0, 45))
        self.home_z_btn.setFont(font)
        self.home_z_btn.setText("Z")
        

        self.control_ly.addLayout(self.home_ly)
        self.hline1_2 = QtWidgets.QFrame(self.control_gb)
        self.hline1_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.hline1_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.control_ly.addWidget(self.hline1_2)


        self.home_ly.addWidget(self.home_lbl)
        self.home_ly.addWidget(self.home_x_btn)
        self.home_ly.addWidget(self.home_y_btn)
        self.home_ly.addWidget(self.home_z_btn)

        # ----------------------- ZERO LAYOUT
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)

        self.zero_ly = QtWidgets.QHBoxLayout()

        self.zero_lbl = QtWidgets.QLabel(self.control_gb)
        self.zero_lbl.setMaximumSize(QtCore.QSize(35, 35))
        self.zero_lbl.setText("")
        self.zero_lbl.setTextFormat(QtCore.Qt.MarkdownText)
        self.zero_lbl.setPixmap(QtGui.QPixmap(self.path+"/assets/download.png"))
        self.zero_lbl.setScaledContents(True)


        self.zero_x_btn = QtWidgets.QPushButton(self.control_gb)
        self.zero_x_btn.setMinimumSize(QtCore.QSize(0, 44))
        self.zero_x_btn.setFont(font)
        self.zero_x_btn.setText("X")

        self.zero_y_btn = QtWidgets.QPushButton(self.control_gb)
        self.zero_y_btn.setMinimumSize(QtCore.QSize(0, 45))
        self.zero_y_btn.setFont(font)
        self.zero_y_btn.setText("Y")
        
        self.zero_z_btn = QtWidgets.QPushButton(self.control_gb)
        self.zero_z_btn.setMinimumSize(QtCore.QSize(0, 45))
        self.zero_z_btn.setFont(font)
        self.zero_z_btn.setText("Z")
        

        self.control_ly.addLayout(self.zero_ly)
        self.hline1 = QtWidgets.QFrame(self.control_gb)
        self.hline1.setFrameShape(QtWidgets.QFrame.HLine)
        self.hline1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.control_ly.addWidget(self.hline1)

        self.zero_ly.addWidget(self.zero_lbl)
        self.zero_ly.addWidget(self.zero_x_btn)
        self.zero_ly.addWidget(self.zero_y_btn)
        self.zero_ly.addWidget(self.zero_z_btn)
        
        
        # -----------------------------MOVE LAYOUT
        font = QtGui.QFont()
        font.setPointSize(11)
        
        btn_font = QtGui.QFont()
        btn_font.setPointSize(11)
        btn_font.setBold(True)
        btn_font.setWeight(75)

        self.move_ly = QtWidgets.QHBoxLayout()
        self.move_lbl = QtWidgets.QLabel(self.control_gb)
        self.move_lbl.setFont(font)
        self.move_lbl.setText("Move (mm)")

        self.move_cb = QtWidgets.QComboBox(self.control_gb)
        self.move_cb.setFont(font)
        self.move_cb.addItem("0.1")
        self.move_cb.addItem("0.5")
        self.move_cb.addItem("1")
        self.move_cb.addItem("2")
        self.move_cb.addItem("5")
        self.move_cb.addItem("10")
        self.move_cb.addItem("50")
        self.move_cb.setPlaceholderText("...")
        self.move_cb.setCurrentText("0.5")
        self.move_ly.addWidget(self.move_lbl)
        self.move_ly.addWidget(self.move_cb)
        self.control_ly.addLayout(self.move_ly)
        
        self.line = QtWidgets.QFrame(self.control_gb)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.control_ly.addWidget(self.line)
        

        self.x_move_lbl = QtWidgets.QLabel(self.control_gb)
        self.x_move_lbl.setMinimumSize(QtCore.QSize(35, 0))
        self.x_move_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.x_move_lbl.setFont(font)
        self.x_move_lbl.setText("X")

        self.move_x_l_btn = QtWidgets.QPushButton(self.control_gb)
        self.move_x_r_btn = QtWidgets.QPushButton(self.control_gb)
        self.move_x_l_btn.setFont(btn_font)
        self.move_x_r_btn.setFont(btn_font)
        self.move_x_l_btn.setText("<")
        self.move_x_r_btn.setText(">")


        self.y_move_lbl = QtWidgets.QLabel(self.control_gb)
        self.y_move_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.y_move_lbl.setFont(font)
        self.y_move_lbl.setText("Y")

        self.move_y_l_btn = QtWidgets.QPushButton(self.control_gb)
        self.move_y_r_btn = QtWidgets.QPushButton(self.control_gb)
        self.move_y_l_btn.setFont(btn_font)
        self.move_y_r_btn.setFont(btn_font)
        self.move_y_l_btn.setText("<")
        self.move_y_r_btn.setText(">")


        self.z_move_lbl = QtWidgets.QLabel(self.control_gb)
        self.z_move_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.z_move_lbl.setFont(font)
        self.z_move_lbl.setText("Z")

        self.move_z_l_btn = QtWidgets.QPushButton(self.control_gb)
        self.move_z_r_btn = QtWidgets.QPushButton(self.control_gb)
        self.move_z_l_btn.setFont(btn_font)
        self.move_z_r_btn.setFont(btn_font)
        self.move_z_l_btn.setText("<")
        self.move_z_r_btn.setText(">")
        
        self.xyz_move_ly = QtWidgets.QGridLayout()
        self.xyz_move_ly.addWidget(self.x_move_lbl, 0, 0, 1, 1)
        self.xyz_move_ly.addWidget(self.move_x_l_btn, 0, 1, 1, 1)
        self.xyz_move_ly.addWidget(self.move_x_r_btn, 0, 2, 1, 1)
        self.xyz_move_ly.addWidget(self.y_move_lbl, 1, 0, 1, 1)
        self.xyz_move_ly.addWidget(self.move_y_l_btn, 1, 1, 1, 1)
        self.xyz_move_ly.addWidget(self.move_y_r_btn, 1, 2, 1, 1)
        self.xyz_move_ly.addWidget(self.z_move_lbl, 2, 0, 1, 1)
        self.xyz_move_ly.addWidget(self.move_z_l_btn, 2, 1, 1, 1)
        self.xyz_move_ly.addWidget(self.move_z_r_btn, 2, 2, 1, 1)
        
        self.control_ly.addLayout(self.xyz_move_ly)
        self.main_layout.addWidget(self.control_gb, 1, 0, 1, 1)

        # ---------------------------------------------------------------------- GRAPHIC_VIEW
        
        self.plot_frame = QtWidgets.QFrame(self.main_widget)
        self.plot_frame.setFrameShape(QtWidgets.QFrame.Box)
        self.plot_frame.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.plot_frame.setStyleSheet("padding:0px")
        self.main_layout.addWidget(self.plot_frame, 0, 1, 2, 3)
        self.plot_frame_ly = QtWidgets.QGridLayout(self.plot_frame)


        self.graph_view = pg.GraphicsView(self.plot_frame)
        self.plot_frame_ly.addWidget(self.graph_view)
        self.graph_view.setBackground('w')
        
        # self.plot_item = pg.PlotItem()
        # # self.plot_item.showAxes(False)
        # self.graph_view.setCentralItem(self.plot_item)

        # --------------------------------------------------------------------- MEASURE GROUP

        self.style_selected = "border: 2px solid #db5775; border-radius:5px; background-color:#feced9"
        self.measure_gb = QtWidgets.QGroupBox(self.main_widget)
        font = QtGui.QFont()
        font.setPointSize(10)

        self.measure_gb.setFont(font)
        self.measure_gb.setTitle("Measure")
        self.measure_ly = QtWidgets.QGridLayout(self.measure_gb)
        # ----------- measure Step ly
        font = QtGui.QFont()
        font.setPointSize(11)
        
        self.step_ly = QtWidgets.QHBoxLayout()
        self.step_lbl = QtWidgets.QLabel(self.measure_gb)
        self.step_lbl.setFont(font)
        self.step_lbl.setText("Step (mm)")


        self.step_cb = QtWidgets.QComboBox(self.measure_gb)
        self.step_cb.setFont(font)
        self.step_cb.setPlaceholderText("...")
        self.step_cb.addItem("0.1")
        self.step_cb.addItem("0.2")
        self.step_cb.addItem("0.5")
        self.step_cb.addItem("1")
        self.step_cb.addItem("2")
        self.step_cb.addItem("5")
        self.step_cb.setMinimumWidth(70)
        self.step_ly.addWidget(self.step_lbl)
        self.step_ly.addWidget(self.step_cb)
        
        

        # ------------------------- time step
        self.time_step_ly = QtWidgets.QHBoxLayout()
        self.time_step_lbl = QtWidgets.QLabel(self.measure_gb)
        self.time_step_lbl.setText("T step (s)")


        self.time_step_cb = QtWidgets.QComboBox(self.measure_gb)
        self.time_step_cb.setFont(font)
        self.time_step_cb.addItem("0.1")
        self.time_step_cb.addItem("0.5")
        self.time_step_cb.addItem("1")
        self.time_step_cb.addItem("5")
        self.time_step_cb.setPlaceholderText("...")
        self.time_step_cb.setMinimumWidth(70)

        self.time_step_ly.addWidget(self.time_step_lbl)
        self.time_step_ly.addWidget(self.time_step_cb)

        self.line_4 = QtWidgets.QFrame(self.measure_gb)
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        
        # -------------------------------------------------- CELL SIZE
        self.x_size_lbl = QtWidgets.QLabel(self.measure_gb)
        self.x_size_lbl.setMaximumWidth(50)
        self.x_size_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.x_size_lbl.setFont(font)
        self.x_size_lbl.setText("X")
        
        self.x_size_sb = QtWidgets.QDoubleSpinBox(self.measure_gb)
        self.x_size_sb.setFont(font)
        self.x_size_sb.setSingleStep(0.1)
        self.x_size_sb.setValue(10.)
        self.x_size_sb.setStyleSheet("border:1px solid gray")
        
        self.y_size_lbl = QtWidgets.QLabel(self.measure_gb)
        self.y_size_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.y_size_lbl.setFont(font)
        self.y_size_lbl.setText("Y")
        
        self.y_size_sb = QtWidgets.QDoubleSpinBox(self.measure_gb)
        self.y_size_sb.setFont(font)
        self.y_size_sb.setSingleStep(0.1)
        self.y_size_sb.setValue(10.)
        self.y_size_sb.setStyleSheet("border:1px solid gray")

        self.z_size_lbl = QtWidgets.QLabel(self.measure_gb)
        self.z_size_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.z_size_lbl.setFont(font)
        self.z_size_lbl.setText("Z")

        self.z_size_sb = QtWidgets.QDoubleSpinBox(self.measure_gb)
        self.z_size_sb.setFont(font)
        self.z_size_sb.setSingleStep(0.1)
        self.z_size_sb.setValue(10.)
        self.z_size_sb.setStyleSheet("border:1px solid gray")


        self.cell_size_lbl = QtWidgets.QLabel(self.measure_gb)
        self.cell_size_lbl.setFont(font)
        self.cell_size_lbl.setText("Cell Size (mm)")
        
        
        self.cell_size_ly = QtWidgets.QGridLayout()
        self.cell_size_ly.addWidget(self.y_size_lbl, 2, 0, 1, 1)
        self.cell_size_ly.addWidget(self.y_size_sb, 2, 1, 1, 1)
        self.cell_size_ly.addWidget(self.x_size_lbl, 1, 0, 1, 1)
        self.cell_size_ly.addWidget(self.z_size_sb, 3, 1, 1, 1)
        self.cell_size_ly.addWidget(self.x_size_sb, 1, 1, 1, 1)
        self.cell_size_ly.addWidget(self.z_size_lbl, 3, 0, 1, 1)
        self.cell_size_ly.addWidget(self.cell_size_lbl, 0, 0, 1, 2)
        
        self.line_2 = QtWidgets.QFrame(self.measure_gb)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)

        # -------------------------------------------------- TIME
        self.time_ly = QtWidgets.QVBoxLayout()
        self.time_lbl = QtWidgets.QLabel(self.measure_gb)
        self.time_lbl.setText("Time span (s)")

        self.time_sb = QtWidgets.QDoubleSpinBox(self.measure_gb)
        self.time_sb.setFont(font)
        self.time_sb.setSingleStep(1)
        self.time_sb.setValue(10.)
        self.time_sb.setMaximum(999999)
        self.time_sb.setStyleSheet("border:1px solid gray")

        self.time_ly.addWidget(self.time_lbl)
        self.time_ly.addWidget(self.time_sb)

        # --------------------------------------------------ORIGIN
        self.origin_var = 0

        self.origin_lbl = QtWidgets.QLabel(self.measure_gb)
        self.origin_lbl.setMinimumSize(QtCore.QSize(67, 0))
        self.origin_lbl.setFont(font)
        self.origin_lbl.setText("Origin")


        self.center_btn = QtWidgets.QPushButton(self.measure_gb)
        self.center_btn.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(self.path+"/assets/center_img.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.center_btn.setIcon(icon)
        self.center_btn.setIconSize(QtCore.QSize(45, 45))
        self.center_btn.setMaximumWidth(55)
        self.center_btn.setMinimumHeight(55)
        self.center_btn.setStyleSheet(self.style_selected)

        self.corner_btn = QtWidgets.QPushButton(self.measure_gb)
        self.corner_btn.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(self.path+"/assets/corner_img.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.corner_btn.setIcon(icon1)
        self.corner_btn.setIconSize(QtCore.QSize(45, 45))
        self.corner_btn.setMaximumWidth(55)
        self.corner_btn.setMinimumHeight(55)


        self.origin_ly = QtWidgets.QHBoxLayout()
        self.origin_ly.addWidget(self.origin_lbl)
        self.origin_ly.addWidget(self.center_btn)
        self.origin_ly.addWidget(self.corner_btn)

        self.line_3 = QtWidgets.QFrame(self.measure_gb)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        
        # ------------------------------------------------- PLANE

        self.plane_var = 0
        self.plane_lbl = QtWidgets.QLabel(self.measure_gb)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.plane_lbl.sizePolicy().hasHeightForWidth())
        self.plane_lbl.setSizePolicy(sizePolicy)

        self.plane_lbl.setFont(font)
        self.plane_lbl.setAlignment(QtCore.Qt.AlignCenter)

        self.xy_plane_btn = QtWidgets.QPushButton(self.measure_gb)
        self.xy_plane_btn.setMinimumWidth(50)
        self.xy_plane_btn.setMinimumHeight(50)
        self.xy_plane_btn.setMaximumWidth(50)
        self.xy_plane_btn.setFont(font)
        self.xy_plane_btn.setAutoFillBackground(True)
        self.xy_plane_btn.setStyleSheet(self.style_selected)
        self.xy_plane_btn.setText("XY")
        

        self.xz_plane_btn = QtWidgets.QPushButton(self.measure_gb)
        self.xz_plane_btn.setMinimumWidth(50)
        self.xz_plane_btn.setMinimumHeight(50)
        self.xz_plane_btn.setMaximumWidth(50)
        self.xz_plane_btn.setFont(font)
        self.xz_plane_btn.setText("XZ")

        self.yz_plane_btn = QtWidgets.QPushButton(self.measure_gb)
        self.yz_plane_btn.setMinimumWidth(50)
        self.yz_plane_btn.setMinimumHeight(50)
        self.yz_plane_btn.setMaximumWidth(50)
        self.yz_plane_btn.setFont(font)
        self.yz_plane_btn.setText("YZ")

        self.plane_ly = QtWidgets.QHBoxLayout()
        self.plane_ly.addWidget(self.plane_lbl)
        self.plane_ly.addWidget(self.xy_plane_btn)
        self.plane_ly.addWidget(self.xz_plane_btn)
        self.plane_ly.addWidget(self.yz_plane_btn)
        self.plane_lbl.setText("Plane")
        
        
        # ------------------- measure type
        self.mes_type_ly = QtWidgets.QVBoxLayout()
        self.space_mes_rb = QtWidgets.QRadioButton("space", self.measure_gb)
        self.space_mes_rb.setChecked(True)
        
        self.time_mes_rb = QtWidgets.QRadioButton("time", self.measure_gb)
        self.mes_type_ly.addWidget(self.space_mes_rb)
        self.mes_type_ly.addWidget(self.time_mes_rb)

        self.start_btn =  QtWidgets.QPushButton(self.measure_gb)
        self.start_btn.setText("Start")
        self.start_btn.setMinimumSize(QtCore.QSize(0, 50))
        self.start_btn.setMaximumWidth(60)

        #--------------------------value
        self.line_5 = QtWidgets.QFrame(self.measure_gb)
        self.line_5.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)

        self.value_ly = QtWidgets.QVBoxLayout()
        self.val_btn = QtWidgets.QPushButton(self.measure_gb)
        self.val_btn.setText("Get Value")

        self.val_le = QtWidgets.QLineEdit(self.measure_gb)
        self.val_le.setText("...")
        self.val_le.setReadOnly(True)
        

        self.val_le.setStyleSheet("border:1px solid gray; border-radius:4px")
        self.val_le.setAlignment(QtCore.Qt.AlignCenter)

        self.value_ly.addWidget(self.val_btn)
        self.value_ly.addWidget(self.val_le)

        # ---------------------- position
        self.pos_layout = QtWidgets.QVBoxLayout()
        self.pos_layout.addSpacerItem(QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding))
        self.x_pos_lbl = QtWidgets.QLabel(self.measure_gb)
        self.x_pos_lbl.setText("X Pos: ...")
        self.y_pos_lbl = QtWidgets.QLabel(self.measure_gb)
        self.y_pos_lbl.setText("Y Pos: ...")
        self.z_pos_lbl = QtWidgets.QLabel(self.measure_gb)
        self.z_pos_lbl.setText("Z Pos: ...")
        
        self.pos_layout.addWidget(self.x_pos_lbl)
        self.pos_layout.addWidget(self.y_pos_lbl)
        self.pos_layout.addWidget(self.z_pos_lbl)
        
        # ------------------------------adc setting
        self.line_6 = QtWidgets.QFrame(self.measure_gb)
        self.line_6.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.adc_sett_ly = QtWidgets.QVBoxLayout()
        self.adc_sett_lbl = QtWidgets.QLabel(self.measure_gb)

        font = QtGui.QFont()
        font.setPointSize(11)

        self.adc_sett_lbl.setFont(font)
        self.adc_sett_lbl.setText("ADC Scale")

        self.adc_sett_cb = QtWidgets.QComboBox(self.measure_gb)
        self.adc_sett_cb.setFont(font)
        self.adc_sett_cb.addItem("+- 6V")
        self.adc_sett_cb.addItem("+- 4V")
        self.adc_sett_cb.addItem("+- 2V")
        self.adc_sett_cb.addItem("+- 1V")
        self.adc_sett_cb.addItem("+- 0.5V")
        self.adc_sett_cb.addItem("+- 0.25V")
        self.adc_sett_cb.setMinimumWidth(70)
        self.adc_sett_cb.setCurrentIndex(2)
        self.adc_sett_ly.addWidget(self.adc_sett_lbl)
        self.adc_sett_ly.addWidget(self.adc_sett_cb)


        self.measure_ly.addLayout(self.step_ly, 0, 0, 1, 1)
        self.measure_ly.addLayout(self.time_step_ly, 1, 0, 1, 1)
        self.measure_ly.addWidget(self.line_2, 2, 0, 1, 1)
        self.measure_ly.addLayout(self.origin_ly, 3, 0, 1, 1)
        self.measure_ly.addWidget(self.line_3, 4, 0, 1, 1)
        self.measure_ly.addLayout(self.plane_ly, 5, 0, 1, 1)

        self.measure_ly.addWidget(self.line_4, 0, 1, 6, 1)

        self.measure_ly.addLayout(self.cell_size_ly, 0, 2, 3, 2)
        self.measure_ly.addLayout(self.time_ly, 3, 2, 2, 1)

        self.measure_ly.addWidget(self.line_5, 0, 6, 6, 1)

        self.measure_ly.addLayout(self.mes_type_ly, 0, 7, 1, 1)
        self.measure_ly.addLayout(self.value_ly, 1, 7, 2, 2)
        self.measure_ly.addLayout(self.pos_layout, 3, 7, 2, 2)
        self.measure_ly.addWidget(self.start_btn, 0, 8, 1, 1)

        self.measure_ly.addWidget(self.line_6, 0, 9, 6, 1)
        self.measure_ly.addLayout(self.adc_sett_ly, 0, 10, 1, 1)

        self.main_layout.addWidget(self.measure_gb, 2, 0, 1, 3)


        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.status = QtWidgets.QStatusBar(MainWindow)
        MainWindow.setStatusBar(self.status)
        self.main_layout.addItem(spacerItem, 2, 3, 1, 1)

        
        MainWindow.setCentralWidget(self.main_widget)


        self.move_cb.setCurrentIndex(1)
        self.step_cb.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.set_events()
        self.init_inputs()

        # MainWindow.setTabOrder(self.port_cb, self.open_btn)
        # MainWindow.setTabOrder(self.open_btn, self.graphicsView)



if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())